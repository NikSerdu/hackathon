// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model ATM {
  id         Int       @id @default(autoincrement())
  address    String
  latitude   Float
  longitude  Float
  allDay     Boolean
  Services   Services? @relation(fields: [servicesId], references: [id])
  servicesId Int?
}

model Services {
  id                  Int               @id @default(autoincrement())
  wheelchair          Wheelchair        @relation(fields: [wheelchairId], references: [id])
  blind               Blind             @relation(fields: [blindId], references: [id])
  nfcForBankCards     NFCForBankCards   @relation(fields: [nFCForBankCardsId], references: [id])
  qrRead              QRRead            @relation(fields: [qRReadId], references: [id])
  supportsUsd         SupportsUsd       @relation(fields: [supportsUsdId], references: [id])
  supportsChargeRub   SupportsChargeRub @relation(fields: [supportsChargeRubId], references: [id])
  supportsEur         SupportsEur       @relation(fields: [supportsEurId], references: [id])
  supportsRub         SupportsRub       @relation(fields: [supportsRubId], references: [id])
  ATM                 ATM[]
  wheelchairId        Int
  blindId             Int
  nFCForBankCardsId   Int
  qRReadId            Int
  supportsUsdId       Int
  supportsChargeRubId Int
  supportsEurId       Int
  supportsRubId       Int
}

model Wheelchair {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model Blind {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model NFCForBankCards {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model QRRead {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model SupportsUsd {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model SupportsChargeRub {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model SupportsEur {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model SupportsRub {
  id                Int        @id @default(autoincrement())
  serviceCapability String
  serviceActivity   String
  Service           Services[]
}

model BankOffice {
  id                  Int                   @id @default(autoincrement())
  salePointName       String
  address             String
  status              String
  hasRamp             Boolean
  latitude            Float
  longitude           Float
  openHours           OpenHours[]
  openHoursIndividual OpenHoursIndividual[]
  tasks               Task[]
  currentTasks        CurrentTask[]
}

model OpenHours {
  id           Int         @id @default(autoincrement())
  days         String
  hours        String
  BankOffice   BankOffice? @relation(fields: [bankOfficeId], references: [id])
  bankOfficeId Int?
}

model OpenHoursIndividual {
  id           Int         @id @default(autoincrement())
  days         String
  hours        String
  BankOffice   BankOffice? @relation(fields: [bankOfficeId], references: [id])
  bankOfficeId Int?
}

model Task {
  id          Int           @id @default(autoincrement())
  name        String
  duration    String
  bankOffice  BankOffice[]
  currentTask CurrentTask[]
}

model CurrentTask {
  id           Int         @id @default(autoincrement())
  task         Task[]
  BankOffice   BankOffice? @relation(fields: [bankOfficeId], references: [id])
  bankOfficeId Int?
}
